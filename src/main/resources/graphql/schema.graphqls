type Query{
    getAppUsers: [AppUser]
    getExam(examId:Int):Exam
    getExams:[Exam]
    login(privateToken:String):AppUser
}

type Mutation{
    createAppUser:String
    createExam(examTitle:String, appUserPrivateToken:String, categories:[String]):Boolean
    createCategory(categoryName:String):Boolean
    addQuestionToExam(question:QuestionInput):Boolean
    addExamRating(value:Float, privateToken:String, examId:Int):Boolean
}


type AppUser{
    id:ID
    publicToken:String
    exams:[Exam]
}

type Exam{
    id:ID
    title:String
    creator:AppUser
    questions:[Question]
    categories:[Category]
    colorValue:Int
    attempts:[ExamAttempts]
    averageScore:Float
    maxPoints:Int
    createDate:String
    examRatings:[ExamRating]
}

type Category{
    id:ID
    value:String
    examCategory:[ExamCategory]
}

type ExamCategory{
    id:ID
    exam:Exam
    category:Category
}

type Answer{
    id:ID
    value:String
    question:Question
    isCorrect:Boolean
}

input AnswerInput{
    value:String
    questionId:Int
    isCorrect:Boolean
}

type Question{
    id:ID
    value:String
    answers:[Answer]
    exam:Exam
    isHidden:Boolean
}

type ExamRating{
    id:ID
    appUser:AppUser
    exam:Exam
    value:Int
}

type ExamAttempts{
    id:ID
    score:Int
    user:AppUser
    exam:Exam
}

input QuestionInput{
    value:String
    examId:Int
    answers:[AnswerInput]
    points:Int
}